{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./assets/jsx/block.jsx"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","wp","config","registerPlugin","plugins","__","i18n","PluginDocumentSettingPanel","editPost","components","PanelRow","DateTimePicker","CheckboxControl","SelectControl","FormTokenField","Spinner","element","Fragment","Component","decodeEntities","htmlEntities","lodash","isEmpty","keys","compact","render","arguments","state","categoriesList","catIdVsName","postMeta","this","attributes","data","select","getEditedPostAttribute","postType","getCurrentPostType","setPostMeta","newMeta","dispatch","meta","enabled","defaults","autoEnable","date","Date","expireAction","getExpireType","categories","includes","getCategories","setTime","getTimezoneOffset","default_categories","default_date","parseInt","taxonomy","setState","getTime","apiFetch","path","url","addQueryArgs","per_page","then","list","forEach","cat","id","context","taxAttributes","rest_base","terms","term","attribute","getDate","actionsList","label","_","union","selectedCats","map","title","icon","initialOpen","className","checked","onChange","currentDate","is12Hour","options","suggestions","selectCategories","maxSuggestions","typeNew","typeOld","expireType","categoriesNew","categoriesOld","length","tokens","some","token","newDate","parse","window"],"mappings":"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","file":"block.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","(function (wp, config) {\n\n    const {registerPlugin} = wp.plugins;\n    const {__} = wp.i18n;\n    const {PluginDocumentSettingPanel} = wp.editPost;\n    const {PanelRow, DateTimePicker, CheckboxControl, SelectControl, FormTokenField, Spinner} = wp.components;\n    const {Fragment, Component} = wp.element;\n    const {decodeEntities} = wp.htmlEntities;\n    const {isEmpty, keys, compact} = lodash;\n\n    class PostExpiratorSidebar extends Component {\n        constructor() {\n            super(...arguments);\n\n            this.state = {\n                categoriesList: [],\n                catIdVsName: [],\n            }\n        }\n\n        componentWillMount() {\n            const {attributes} = this.state;\n\n            const postMeta = wp.data.select('core/editor').getEditedPostAttribute('meta');\n            const postType = wp.data.select('core/editor').getCurrentPostType();\n            const setPostMeta = (newMeta) => wp.data.dispatch('core/editor').editPost({meta: newMeta});\n\n            let enabled = config.defaults.autoEnable == 1;\n            let date = new Date();\n\n            let expireAction = this.getExpireType(postMeta);\n\n            let categories = [];\n            if (expireAction.includes('category')) {\n                categories = this.getCategories(postMeta);\n            }\n\n            if (postMeta['_expiration-date-status'] && postMeta['_expiration-date-status'] === 'saved') {\n                enabled = true;\n            }\n\n            if (postMeta['_expiration-date']) {\n                date.setTime((postMeta['_expiration-date'] + date.getTimezoneOffset() * 60) * 1000);\n            } else {\n                categories = config.default_categories;\n                if (config.default_date) {\n                    date.setTime((parseInt(config.default_date) + date.getTimezoneOffset() * 60) * 1000);\n                }\n            }\n\n            let taxonomy = config.defaults.taxonomy || 'category';\n\n            this.setState({\n                enabled: enabled,\n                date: date,\n                expireAction: expireAction,\n                categories: categories,\n                taxonomy: taxonomy,\n            });\n\n            // Force all the metadata to be saved. Required for making sure the default settings are stored correctly.\n            setPostMeta({'_expiration-date-status': (enabled ? 'saved' : '')});\n            setPostMeta({'_expiration-date': (date.getTime()) / 1000});\n            setPostMeta({'_expiration-date-type': expireAction});\n            setPostMeta({'_expiration-date-categories': categories});\n\n            let categoriesList = [];\n            let catIdVsName = [];\n\n            if ((!taxonomy && postType === 'post') || taxonomy === 'category') {\n                wp.apiFetch({\n                    path: wp.url.addQueryArgs('wp/v2/categories', {per_page: -1}),\n                }).then((list) => {\n                    list.forEach(cat => {\n                        categoriesList[cat.name] = cat;\n                        catIdVsName[cat.id] = cat.name;\n                    });\n                    this.setState({categoriesList: categoriesList, catIdVsName: catIdVsName, taxonomy: __('Category')});\n                });\n            } else if (postType !== 'page') {\n                wp.apiFetch({\n                    path: wp.url.addQueryArgs(`wp/v2/taxonomies/${taxonomy}`, {context: 'edit'}),\n                }).then((taxAttributes) => {\n                    // fetch all terms\n                    wp.apiFetch({\n                        path: wp.url.addQueryArgs(`wp/v2/${taxAttributes.rest_base}`, {context: 'edit'}),\n                    }).then((terms) => {\n                        terms.forEach(term => {\n                            categoriesList[decodeEntities(term.name)] = term;\n                            catIdVsName[term.id] = decodeEntities(term.name);\n                        });\n                        this.setState({\n                            categoriesList: categoriesList,\n                            catIdVsName: catIdVsName,\n                            taxonomy: decodeEntities(taxAttributes.name)\n                        });\n                    });\n                });\n            }\n\n        }\n\n        componentDidUpdate() {\n            const {enabled, date, expireAction, categories, attribute} = this.state;\n            const setPostMeta = (newMeta) => wp.data.dispatch('core/editor').editPost({meta: newMeta});\n            const postMeta = wp.data.select('core/editor').getEditedPostAttribute('meta');\n\n            switch (attribute) {\n                case 'enabled':\n                    setPostMeta({'_expiration-date-status': (enabled ? 'saved' : '')});\n                    // if date is not set when the checkbox is enabled, set it to the default date\n                    // this is to prevent the user from having to click the date to set it\n                    if (!postMeta['_expiration-date']) {\n                        setPostMeta({'_expiration-date': this.getDate(date)});\n                    }\n                    break;\n                case 'date':\n                    if (typeof date === 'string') {\n                        setPostMeta({'_expiration-date': this.getDate(date)});\n                    }\n                    break;\n                case 'action':\n                    setPostMeta({'_expiration-date-type': expireAction});\n                    if (!expireAction.includes('category')) {\n                        setPostMeta({'_expiration-date-categories': []});\n                    }\n                    break;\n                case 'category':\n                    setPostMeta({'_expiration-date-categories': categories});\n                    break;\n            }\n\n        }\n\n        render() {\n            const {categoriesList, catIdVsName} = this.state;\n            const {enabled, date, expireAction, categories, taxonomy} = this.state;\n\n            const postType = wp.data.select('core/editor').getCurrentPostType();\n\n            let actionsList = [\n                {label: __('Draft', 'post-expirator'), value: 'draft'},\n                {label: __('Delete', 'post-expirator'), value: 'delete'},\n                {label: __('Trash', 'post-expirator'), value: 'trash'},\n                {label: __('Private', 'post-expirator'), value: 'private'},\n                {label: __('Stick', 'post-expirator'), value: 'stick'},\n                {label: __('Unstick', 'post-expirator'), value: 'unstick'},\n            ];\n\n            if (postType !== 'page') {\n                actionsList = _.union(actionsList, [\n                    {label: __('Category: Replace', 'post-expirator'), value: 'category'},\n                    {label: __('Category: Add', 'post-expirator'), value: 'category-add'},\n                    {label: __('Category: Remove', 'post-expirator'), value: 'category-remove'},\n                ]);\n            }\n\n            let selectedCats = categories && compact(categories.map((id) => catIdVsName[id] || false));\n            if (typeof selectedCats === 'string') {\n                selectedCats = [];\n            }\n\n            return (\n                <PluginDocumentSettingPanel title={__('Post Expirator', 'post-expirator')} icon=\"calendar\"\n                                            initialOpen={enabled} className={'post-expirator-panel'}>\n                    <PanelRow>\n                        <CheckboxControl\n                            label={__('Enable Post Expiration', 'post-expirator')}\n                            checked={enabled}\n                            onChange={(value) => {\n                                this.setState({enabled: !enabled, attribute: 'enabled'})\n                            }}\n                        />\n                    </PanelRow>\n                    {enabled && (\n                        <Fragment>\n                            <PanelRow>\n                                <DateTimePicker\n                                    currentDate={date}\n                                    onChange={(value) => this.setState({date: value, attribute: 'date'})}\n                                    is12Hour={true}\n                                />\n                            </PanelRow>\n                            <SelectControl\n                                label={__('How to expire', 'post-expirator')}\n                                value={expireAction}\n                                options={actionsList}\n                                onChange={(value) => {\n                                    this.setState({expireAction: value, attribute: 'action'})\n                                }}\n                            />\n                            {expireAction.includes('category') &&\n                            (\n                                (isEmpty(keys(categoriesList)) && (\n                                    <Fragment>\n                                        {__('Loading', 'post-expirator') + ` (${taxonomy})`}\n                                        <Spinner/>\n                                    </Fragment>\n                                ))\n                                ||\n                                (\n                                    <FormTokenField\n                                        label={__('Expiration Categories', 'post-expirator') + ` (${taxonomy})`}\n                                        value={selectedCats}\n                                        suggestions={Object.keys(categoriesList)}\n                                        onChange={(value) => {\n                                            this.setState({\n                                                categories: this.selectCategories(value),\n                                                attribute: 'category'\n                                            })\n                                        }}\n                                        maxSuggestions={10}\n                                    />\n                                )\n                            )}\n                        </Fragment>\n                    )}\n                </PluginDocumentSettingPanel>\n            );\n        }\n\n        // what action to take on expiration\n        getExpireType(postMeta) {\n            let typeNew = postMeta['_expiration-date-type'];\n            let typeOld = postMeta['_expiration-date-options'] && postMeta['_expiration-date-options']['expireType'];\n\n\n\n            if (typeNew) {\n                return typeNew;\n            }\n\n            if (typeOld) {\n                return typeOld;\n            }\n\n            if (config && config.defaults && config.defaults.expireType) {\n                return config.defaults.expireType;\n            }\n\n            return 'draft';\n        }\n\n        // what categories to add/remove/replace\n        getCategories(postMeta) {\n            let categoriesNew = postMeta['_expiration-date-categories'] && postMeta['_expiration-date-categories'];\n            let categoriesOld = postMeta['_expiration-date-options'] && postMeta['_expiration-date-options']['category'];\n\n            if (typeof categoriesNew === 'object' && categoriesNew.length > 0) {\n                return categoriesNew;\n            }\n\n            if (categoriesOld && typeof categoriesOld !== 'undefined' && typeof categoriesOld !== 'object') {\n                categories = [categoriesOld];\n            }\n\n            return categoriesOld;\n\n        }\n\n        // fired for the autocomplete\n        selectCategories(tokens) {\n            const {categoriesList, catIdVsName} = this.state;\n\n            var hasNoSuggestion = tokens.some(function (token) {\n                return typeof token === 'string' && !categoriesList[token];\n            });\n\n            if (hasNoSuggestion) {\n                return;\n            }\n\n            var categories = tokens.map(function (token) {\n                return typeof token === 'string' ? categoriesList[token] : token;\n            })\n\n            return categories.map((cat) => cat.id);\n        }\n\n        getDate(date) {\n            let newDate = new Date();\n            newDate.setTime(Date.parse(date));\n            newDate.setTime(newDate.getTime() - new Date().getTimezoneOffset() * 60 * 1000);\n            return ((newDate.getTime()) / 1000);\n        }\n\n    }\n\n    registerPlugin('postexpirator-sidebar', {\n        render: PostExpiratorSidebar\n    });\n\n\n})(window.wp, config);\n"],"sourceRoot":""}